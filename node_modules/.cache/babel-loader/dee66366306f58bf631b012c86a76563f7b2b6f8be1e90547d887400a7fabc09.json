{"ast":null,"code":"/*创建虚拟dom对象 */\nArray.prototype.BB = 200;\nlet arr = [20, 30];\nconsole.log(Object.getOwnPropertyNames(arr));\nconst each = function each(obj, callback) {\n  if (obj === null || typeof obj !== \"object\") throw new TypeError('obj is not a object');\n  if (typeof callback !== \"function\") throw new TypeError('callback is not a function');\n  let keys = Reflect.ownKeys(obj);\n  keys.forEach(key => {\n    let value = obj[key];\n    // 每一次迭代，都把回调函数执行\n    callback(value, key);\n  });\n};\nexport function createElement(ele, props, ...chilrden) {\n  let virturalDOM = {\n    $$typeof: Symbol('react.element'),\n    ref: null,\n    key: null,\n    type: null,\n    props: {}\n  };\n  let lenth = chilrden.length;\n  virturalDOM.type = ele;\n  if (props !== null) {\n    virturalDOM.props = {\n      ...props\n    };\n  }\n  if (lenth === 1) virturalDOM.props.chilrden = chilrden[0];\n  if (lenth > 1) virturalDOM.props.chilrden = chilrden;\n  return virturalDOM;\n}\nexport function render(virturalDOM, container) {\n  let {\n    type,\n    props\n  } = virturalDOM;\n  if (typeof type === \"string\") {\n    //存储的标签名：动态创建这样一个标签\n    let ele = document.createElement(type);\n    // 为标签设置相关的属性&子节点\n    each(props, (value, key) => {\n      // className的处理：value存储的是样式类名\n      if (key === 'className') {\n        ele.className = value;\n        return;\n      }\n      // style的处理:value存储的是样式对象\n      if (key === 'style') {\n        each(value, (val, attr) => {\n          ele.style[attr] = val;\n        });\n        return;\n      }\n      ele.setAttribute(key, value);\n    });\n    // 子节点的处理:value存储的是属性值\n    if (key === 'children') {\n      let children = value;\n      if (!Array.isArray(children)) children = [children];\n      children.forEach(child => {\n        // 子节点是文本节点:直接插入即可\n        if (typeof child === 'string') {\n          ele.appendChild(document.createTextNode(child));\n          return;\n        }\n        // 子节点又是一个virtualDOM递归处理\n        render(child, ele);\n      });\n      return;\n    }\n    // 把新增的标签添加到指定的容器中\n    container.appendChild(ele);\n  }\n}","map":{"version":3,"names":["Array","prototype","BB","arr","console","log","Object","getOwnPropertyNames","each","obj","callback","TypeError","keys","Reflect","ownKeys","forEach","key","value","createElement","ele","props","chilrden","virturalDOM","$$typeof","Symbol","ref","type","lenth","length","render","container","document","className","val","attr","style","setAttribute","children","isArray","child","appendChild","createTextNode"],"sources":["C:/learn React/hbwgz/src/jsxHandle.js"],"sourcesContent":["/*创建虚拟dom对象 */\r\nArray.prototype.BB = 200;\r\nlet arr = [20,30]\r\nconsole.log(Object.getOwnPropertyNames(arr))\r\nconst each = function each(obj, callback) {\r\n  if (obj === null || typeof obj !== \"object\") throw new TypeError('obj is not a object');\r\n  if (typeof callback !== \"function\") throw new TypeError('callback is not a function');\r\n  let keys = Reflect.ownKeys(obj);\r\n  keys.forEach(key => {\r\n      let value = obj[key];\r\n      // 每一次迭代，都把回调函数执行\r\n      callback(value, key);\r\n  });\r\n};\r\n\r\nexport function createElement(ele,props,...chilrden){\r\n  let virturalDOM = {\r\n    $$typeof:Symbol('react.element'),\r\n    ref:null,\r\n    key:null,\r\n    type:null,\r\n    props:{}\r\n  }\r\n  let lenth = chilrden.length;\r\n  virturalDOM.type = ele;\r\n  if(props!==null){\r\n    virturalDOM.props={\r\n      ...props\r\n    }\r\n  }\r\n  if(lenth===1) virturalDOM.props.chilrden = chilrden[0]\r\n  if(lenth>1) virturalDOM.props.chilrden = chilrden\r\n  return virturalDOM\r\n}\r\nexport function render(virturalDOM,container){\r\n  let {type,props} = virturalDOM\r\n  if(typeof type === \"string\"){ //存储的标签名：动态创建这样一个标签\r\n    let ele = document.createElement(type)\r\n    // 为标签设置相关的属性&子节点\r\n    each(props,(value,key)=>{\r\n      // className的处理：value存储的是样式类名\r\n      if(key === 'className'){\r\n        ele.className = value;\r\n        return;\r\n      }\r\n      // style的处理:value存储的是样式对象\r\n      if(key==='style'){\r\n        each(value,(val,attr)=>{\r\n          ele.style[attr]= val;\r\n        })\r\n        return;\r\n      }\r\n      ele.setAttribute(key,value);\r\n    })\r\n    // 子节点的处理:value存储的是属性值\r\n    if(key==='children'){\r\n      let children = value;\r\n      if(!Array.isArray(children)) children = [children]\r\n      children.forEach(child=>{\r\n        // 子节点是文本节点:直接插入即可\r\n        if(typeof child === 'string'){\r\n          ele.appendChild(document.createTextNode(child))\r\n          return\r\n        }\r\n        // 子节点又是一个virtualDOM递归处理\r\n        render(child,ele)\r\n      })\r\n      return;\r\n    }\r\n    // 把新增的标签添加到指定的容器中\r\n    container.appendChild(ele)\r\n  }\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}